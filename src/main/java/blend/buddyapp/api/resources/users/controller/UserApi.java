/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package blend.buddyapp.api.resources.users.controller;


import blend.buddyapp.api.resources.users.model.User;
import io.swagger.annotations.*;
import org.keycloak.representations.AccessTokenResponse;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-09-14T03:02:35.640+02:00[Europe/Prague]")
@io.swagger.annotations.Api(value = "auth", description = "the auth API")
public interface UserApi {

    /**
     * POST /auth/register : Register a new user, get a token in return.
     * Only admins can use this endpoint
     *
     * @param accountRequestBody  (required)
     * @return account created succesfully (status code 201)
     *         or Not authenticated (status code 403)
     *         or Only admins can register new users (status code 401)
     *         or This student number already exist (status code 406)
     *         or password does not match requirements (status code 412)
     */
    @ApiOperation(value = "Register a new user, get a token in return.", nickname = "registerUser", notes = "Only admins can use this endpoint", response = AccessTokenResponse.class, tags={ "auth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "account created succesfully", response = AccessTokenResponse.class),
        @ApiResponse(code = 403, message = "Not authenticated"),
        @ApiResponse(code = 401, message = "Only admins can register new users"),
        @ApiResponse(code = 406, message = "This student number already exist"),
        @ApiResponse(code = 412, message = "password does not match requirements") })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<?> postUser(@ApiParam(value = "" ,required=true )   @Valid @RequestBody User student) throws Exception {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }
}
